#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
#include <exception>
#include <mutex>
using namespace std;


// Исключение для ошибок аутентификации
class AuthenticationException : public exception {
public:
    const char* what() const noexcept override {
        return "Ошибка аутентификации пользователя.";
    }
};

// Исключение для ошибок отправки сообщения
class MessageSendingException : public exception {
public:
    const char* what() const noexcept override {
        return "Ошибка отправки сообщения.";
    }
};

// Класс пользователя
template <typename T>
class User {
public:
   string login;
    string password;
    string name;

    User(string login, string password, string name) {
        this->login = login;
        this->password = password;
        this->name = name;
    }
};

// Класс чата
template <typename T>
class Chat {
private:
    vector<T> users;
    mutex chatMutex;

public:
    // Регистрация нового пользователя
    void registerUser(string login, string password, string name) {
        lock_guard<mutex> lock(chatMutex);
        // Проверяем, что пользователь с таким логином еще не зарегистрирован
        if (find_if(users.begin(), users.end(), [&](const T& user) {
            return user.login == login;
            }) != users.end()) {
            throw AuthenticationException();
        }

        // Создаем нового пользователя и добавляем его в список
        T newUser(login, password, name);
        users.push_back(newUser);
        cout << "Пользователь " << name << " успешно зарегистрирован." << endl;
    }

    // Аутентификация пользователя
    bool login(string loginOrPassword) {
        lock_guard<mutex> lock(chatMutex);
        // Ищем пользователя с указанным логином или паролем
        auto user = find_if(users.begin(), users.end(), [&](const T& user) {
            return user.login == loginOrPassword || user.password == loginOrPassword;
            });

        // Если пользователь найден, возвращаем true
        if (user != users.end()) {
            cout << "Пользователь " << user->name << " успешно вошел в чат." << endl;
            return true;
        }

        throw AuthenticationException();
    }

    // Отправка сообщения конкретному пользователю
    void sendMessageToUser(string senderLoginOrPassword, string receiverLoginOrPassword,string message) {
       lock_guard<mutex> lock(chatMutex);
        // Ищем отправителя
        auto sender = find_if(users.begin(), users.end(), [&](const T& user) {
            return user.login == senderLoginOrPassword || user.password == senderLoginOrPassword;
            });

        // Ищем получателя
        auto receiver = find_if(users.begin(), users.end(), [&](const T& user) {
            return user.login == receiverLoginOrPassword || user.password == receiverLoginOrPassword;
            });

        // Если отправитель и получатель найдены, отправляем сообщение
        if (sender != users.end() && receiver != users.end()) {
            cout << sender->name << " -> " << receiver->name << ": " << message << endl;
        }
        else {
            throw MessageSendingException();
        }
    }

    // Отправка сообщения всем пользователям
    void sendMessage(string senderLoginOrPassword, string message) {
       lock_guard<mutex> lock(chatMutex);
        // Ищем отправителя
        auto sender = find_if(users.begin(), users.end(), [&](const T& user) {

            return user.login == senderLoginOrPassword || user.password == senderLoginOrPassword;
            });

        // Если отправитель найден, отправляем сообщение всем пользователям
        if (sender != users.end()) {
            for (const auto& user : users) {
             cout << sender->name << " -> " << user.name << ": " << message << endl;
            }
        }
        else {
            throw MessageSendingException();
        }
    }

    // Получение списка пользователей
    vector<T> getUsers() {
        return users;
    }
};

int main() {
    // Используем шаблон для создания чата с пользователями User
    Chat<User<string>> chat;

    try {
        // Регистрация пользователей
        string login, password, name;

        // Регистрация первого пользователя
        cout << "Регистрация первого пользователя:" << endl;
        cout << "Введите логин: ";
        getline(cin, login);
        cout << "Введите пароль: ";
        getline(cin, password);
        cout << "Введите имя: ";
        getline(cin, name);
        chat.registerUser(login, password, name);

        // Регистрация второго пользователя
        cout << "Регистрация второго пользователя:" << endl;
        cout << "Введите логин: ";
        getline(cin, login);
        cout << "Введите пароль: ";
        getline(cin, password);
        cout << "Введите имя: ";
        getline(cin, name);
        chat.registerUser(login, password, name);

        // Регистрация третьего пользователя
        cout << "Регистрация третьего пользователя:" << endl;
        cout << "Введите логин: ";
        getline(cin, login);
        cout << "Введите пароль: ";
        getline(cin, password);
        cout << "Введите имя: ";
        getline(cin, name);
        chat.registerUser(login, password, name);

        // Выбор отправки сообщения
        std::string senderLoginOrPassword, receiverLoginOrPassword, message;
        int choice;
        do {
            cout << "Выберите действие:" << endl;
            cout << "1. Отправить сообщение конкретному пользователю" << endl;
            cout << "2. Отправить сообщение всем пользователям" << endl;
            cout << "3. Выйти" << endl;
            cout << "Ваш выбор: ";
            cin >> choice;
            cin.ignore(); // Очищаем буфер ввода

            switch (choice) {
            case 1:
                cout << "Введите логин или пароль отправителя: ";
                getline(cin, senderLoginOrPassword);
                cout << "Введите логин или пароль получателя: ";
                getline(cin, receiverLoginOrPassword);
                cout << "Введите сообщение: ";
                getline(cin, message);
                chat.sendMessageToUser(senderLoginOrPassword, receiverLoginOrPassword, message);
                break;
            case 2:
                cout << "Введите логин или пароль отправителя: ";
                getline(cin, senderLoginOrPassword);
                cout << "Введите сообщение: ";
                getline(cin, message);
                chat.sendMessage(senderLoginOrPassword, message);
                break;
            case 3:
                cout << "Выход из программы." << endl;
                break;
            default:
              cout << "Неверный выбор. Попробуйте еще раз." << endl;
                break;
            }
        } while (choice != 3);

    }
    catch (const AuthenticationException& e) {
        cerr << e.what() << endl;
    }
    catch (const MessageSendingException& e) {
       cerr << e.what() << endl;
    }

    return 0;
}
